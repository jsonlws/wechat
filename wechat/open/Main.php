<?phpnamespace app\mi_openapi\home\open;use EasyWeChat\Factory;use EasyWeChat\OpenPlatform\Server\Guard;use think\facade\Cache;class Main{    protected $openPlatform;    protected $appId;    /**     * main constructor.     * @param $company_token [公司标识]     */    public function __construct($company_token=110){        $this->init($company_token);    }    /**     * 静态调用     * @param $company_token [公司标识]     * @return Main     */    public static function main($company_token=110){        return new self($company_token);    }    /**     * 开放平台必要参数     *  @param $company_token [公司标识]     * @return array     */    private function openConfig($company_token=110){        $parentconfig = getSetting('company', 'weixinopen',null,$company_token,'');        return [            'app_id'   => $parentconfig['app_id'],//$items['app_id'], //开放平台第三方平台 APPID            'secret'   => $parentconfig['secret'],//$items['secret'], //开放平台第三方平台 Secret            'token'    => $parentconfig['token'],//$items['token'], //开放平台第三方平台 Token            'aes_key'  => $parentconfig['aes_key']//$items['aes_key']  //开放平台第三方平台 AES Key        ];    }    private function init($company_token=110){        $config = $this->openConfig($company_token);        $this->appId = $config['app_id'];        $this->openPlatform = Factory::openPlatform($config);    }    /**     * 获取用户授权页 URL     * @param $callback_url [回调URI]     * @return mixed     */    public function  getAuthorizeUrl($callback_url){        //为了防止因修改服务器配置引起easywechat获取不到缓存信息报错        if(empty(Cache::get('ComponentVerifyTicket'.$this->appId))){            return '';        }        return $this->openPlatform->getPreAuthorizationUrl($callback_url); // 传入回调URI即可    }    /**     * 使用授权码换取接口调用凭据和授权信息     * @param $authCode [授权码]     * @return mixed     */    public function getTokenInfo($authCode){        return $this->openPlatform->handleAuthorize($authCode); // 传入回调URI即可    }    /**     * 获取已授权的授权方列表     * @param int $offset     * @param int $count     * @return mixed     */    public function getAuthorizeList($offset=0, $count=500){        return $this->openPlatform->getAuthorizers($offset,$count);    }    /**     * 获取授权方的帐号基本信息     * @param $appId [授权方appId]     * @return mixed     */    public function getAuthorizeInfo($appId){        return $this->openPlatform->getAuthorizer($appId);    }    /**     *  获取授权方选项设置     * @param $appId [授权方appId]     * @param $name [选项名称]     * @return mixed     */    public function getAuthorizeOptionSetting($appId, $name){        return $this->openPlatform->getAuthorizerOption($appId, $name);    }    /**     * 设置授权方的选项信息     * @param $appId [授权方appId]     * @param $name [选项名称]     * @param $value [设置的选项值]     * @return mixed     */    public function setAuthorizeOption($appId, $name, $value){        return $this->openPlatform->setAuthorizerOption($appId, $name, $value);    }    /**     * 获取代小程序业务     * @param $appId [小程序appid]     * @param $refreshToken [第三方平台保存的token令牌]     * @return mixed     */    public function applet($appId, $refreshToken){        return $this->openPlatform->officialAccount($appId, $refreshToken);    }    /**     * 微信授权事件相关处理     */    public function handleAuthorizationEvent($company){        $server = $this->openPlatform->server;        // 处理授权成功事件        $server->push(function ($message) use ($company) {            $this->getTokenInfo($message['AuthorizationCode']);//为了解决authorizer_refresh_token有时获取不到的情况            $userInfo = $this->getAuthorizeInfo($message['AuthorizerAppid']);            $type = 1; //表示公众号            if(isset($userInfo['authorizer_info']['MiniProgramInfo'])){                $type = 2; //表示小程序            }            $insertData = [                'wechat_appid'=>$userInfo['authorization_info']['authorizer_appid'],                'wechat_token'=>$userInfo['authorization_info']['authorizer_refresh_token'],                'wechat_qrcode'=>$userInfo['authorizer_info']['qrcode_url'],                'wechat_logo'=>$userInfo['authorizer_info']['head_img'] ?? '',                'wechat_title'=>$userInfo['authorizer_info']['nick_name'],                'wechat_username'=>$userInfo['authorizer_info']['user_name'],                'wechat_type'=>$userInfo['authorizer_info']['service_type_info']['id'],                'company_token'=>$company,                'type' => $type,                'operation_status'=>0            ];            model("mi_openapi/wechatopenlistex")->addSave(array_filter($insertData));        }, Guard::EVENT_AUTHORIZED);        // 处理更新授权成功事件        $server->push(function ($message) {            $this->getTokenInfo($message['AuthorizationCode']);            $userInfo = $this->getAuthorizeInfo($message['AuthorizerAppid']);            $updateData = [                'wechat_token'=>$userInfo['authorization_info']['authorizer_refresh_token'],                'wechat_qrcode'=>$userInfo['authorizer_info']['qrcode_url'],                'wechat_logo'=>$userInfo['authorizer_info']['head_img'] ?? '',                'wechat_title'=>$userInfo['authorizer_info']['nick_name'],                'wechat_username'=>$userInfo['authorizer_info']['user_name'],                'wechat_type'=>$userInfo['authorizer_info']['service_type_info']['id']            ];            model("mi_openapi/wechatopenlistex")->addSave(array_filter($updateData),[['wechat_appid','=',$userInfo['authorization_info']['authorizer_appid']]]);        }, Guard::EVENT_UPDATE_AUTHORIZED);        // 处理取消授权        $server->push(function ($message) {            model("mi_openapi/wechatopenlistex")->del([['wechat_appid','=',$message['AuthorizerAppid']]]);        }, Guard::EVENT_UNAUTHORIZED);        //缓存微信每十分钟传过来的ComponentVerifyTicket,用于后期代开发小程序相关业务时使用        $server->push(function ($message){            Cache::set('ComponentVerifyTicket'.$this->appId,$message['ComponentVerifyTicket']);        },Guard::EVENT_COMPONENT_VERIFY_TICKET);        return $server->serve();    }    /**     * 代消息处理     * @param $appId [公众号appid]     * @return mixed     */    public function replaceHandleEvent($appId){        $data = model("mi_openapi/wechatopenlistex")->_where([['wechat_appid','=',$appId]])->info();        //$this->errorLog('对应公众号信息',$data);        $officialAccount = $this->openPlatform->officialAccount($appId,$data['wechat_token']);        $server = $officialAccount->server;        $server->push(function ($message) use ($data) {            //$this->errorLog('接收消息内容',$message);            $shopToken = $data['shop_token'];            $res =  $this->handleOfficialAccount($message,$shopToken);            //$this->errorLog('自动回复消息内容',$res);            return $res;            //return $this->handleMsg($message['Content'],$message['FromUserName'],$message['ToUserName']);        });        $response = $server->serve();        $response->send();    }    /**     * 客服服务(这个方法是仅用于全网发布时使用)     * @param $msgId [消息id]     */    public function customerService($msgId){        $data = model("mi_openapi/Usermsgex")->_where([['id','=',$msgId]])->info();        $result = model("mi_openapi/wechatopenlistex")->_where([['wechat_username','=',$data['service_openid']]])->info();        $officialAccount = $this->openPlatform->officialAccount($result['wechat_appid'],$result['wechat_token']);        $sendContent = explode(':',$data['content'])[1].'_from_api';        $officialAccount->customer_service->message($sendContent)->to($data['from_openid'])->send();    }    /**     * 此方法主要用于微信官方测试（仅用于全网发布需要）     * @param $content [消息内容]     * @param $from [消息发送者]     * @param $toUser [消息接收者]     * @return string     */    private function handleMsg($content,$from,$toUser){        switch ($content){            case 'TESTCOMPONENT_MSG_TYPE_TEXT':                return 'TESTCOMPONENT_MSG_TYPE_TEXT_callback';                break;            default:                $data = ['content'=>$content,'create_time'=>time(),'from_openid'=>$from,'service_openid'=>$toUser];                model("mi_openapi/Usermsgex")->addSave($data);                return '';                break;        }    }    /**     * 针对公众号相关事件处理     * @param $message     * @return string     */    private function handleOfficialAccount($message,$shopToken){        $defualt = model("lp_wechat/Replyex")->_where([            ['shop_token','=',$shopToken],            ['keywords','=','default'],            ['status','=',1]        ])->info();        $defualtMsg = '您的留言已收到';        if(!empty($defualt)){            $defualtMsg = json_decode($defualt['data'],true)['content'];        }        switch ($message['MsgType']) {            case 'event': //事件消息                switch ($message['Event']) {                    case 'subscribe': //关注                        $res = model("lp_wechat/Replyex")->_where([                            ['shop_token','=',$shopToken],                            ['keywords','=','subscribe'],                            ['type','=','text'],                            ['status','=',1]                        ])->info();                        return json_decode($res['data'],true)['content'] ?? '欢迎关注';                        break;                    case 'unsubscribe': //取消关注                        break;                    case 'CLICK': //文字消息                        return '已收到留言';                        break;                }                break;            //文字消息            case 'text':                $res = model("lp_wechat/Replyex")->_where([                    ['shop_token','=',$shopToken],                    ['keywords','=',$message['Content']],                    ['type','=','text'],                    ['status','=',1]                ])->info();                return json_decode($res['data'],true)['content'] ?? $defualtMsg;                break;            case 'image':                return '收到图片消息';                break;            case 'voice':                return '收到语音消息';                break;            case 'video':                return '收到视频消息';                break;            case 'location':                return '收到坐标消息';                break;            case 'link':                return '收到链接消息';                break;            case 'file':                return '收到文件消息';                break;            default:                return '';                break;        }    }    /**     * 公众号网页授权     * @param $appId [公众号app_id]     * @return mixed     */    public function WebPageAuthorization($appId){        $data = model("mi_openapi/wechatopenlistex")->_where([['wechat_appid','=',$appId]])->info();        $officialAccount = $this->openPlatform->officialAccount($appId,$data['wechat_token']);        return $officialAccount;    }    /**     * 记录错误信息方便后期排查问题     * @param $msg     * @param $ret     */    private function errorLog($msg,$ret)    {        file_put_contents(__DIR__ . '/error/official.log', "[" . date('Y-m-d H:i:s') . "] ".$msg."," .json_encode($ret,JSON_UNESCAPED_UNICODE).PHP_EOL, FILE_APPEND);    }}